import { orchestrateUserInput } from "./agents/orchestrator";
import { MasterAgent } from "./agents/masterAgent";
import { PlannerAgent } from "./agents/plannerAgent";

async function runExample() {
  console.log("===============================================");
  console.log("üöÄ PADHAI-BUDDY EXAMPLE EXECUTION STARTING");
  console.log("===============================================");
  
  // Configuration section
  console.log("\nüìù CONFIGURATION");
  console.log("-----------------------------------------------");
  const apiKey = process.env.NEBIUS_API_KEY!;
  if (!apiKey) {
    console.error("‚õî ERROR: NEBIUS_API_KEY environment variable not set");
    process.exit(1);
  }
  console.log("‚úÖ API Key loaded successfully");
  
  // Input section
  console.log("\nüì• USER INPUT");
  console.log("-----------------------------------------------");
  const userInput = `DCÂõûË∑Ø„ÅÆÁêÜËß£
DCÔºàÁõ¥ÊµÅÔºâÂõûË∑Ø„ÅØ„ÄÅÈõªÊµÅ„Åå‰∏ÄÂÆöÊñπÂêë„Å´ÊµÅ„Çå„ÇãÈõªÊ∞óÂõûË∑Ø„Åß„Åô„ÄÇÈõªÂ≠ê„ÅÆÊµÅ„Çå„ÅåÂë®ÊúüÁöÑ„Å´ÂèçËª¢„Åô„ÇãACÔºà‰∫§ÊµÅÔºâ„Å®„ÅØÁï∞„Å™„Çä„ÄÅDC„ÅØÂÆâÂÆö„Åó„ÅüÈõªÊµÅ„ÇíÁ∂≠ÊåÅ„Åô„Çã„Åü„ÇÅ„ÄÅ„Éê„ÉÉ„ÉÜ„É™„Éº„ÄÅ„Çπ„Éû„Éº„Éà„Éï„Ç©„É≥„ÄÅÈõªÂ≠êÂõûË∑Ø„Å™„Å©„ÅÆ„Éá„Éê„Ç§„Çπ„Å´ÊúÄÈÅ©„Åß„Åô„ÄÇ

Âü∫Êú¨ÁöÑ„Å™DCÂõûË∑Ø„Åß„ÅØ„ÄÅÈõªÊµÅ„ÅØ„Éê„ÉÉ„ÉÜ„É™„Éº„ÇÑDCÈõªÊ∫ê„Å™„Å©„ÅÆÈõªÊ∫ê„Å´„Çà„Å£„Å¶ÁîüÊàê„Åï„Çå„ÄÅ‰∏ÄÂÆö„ÅÆÈõªÂúß„Åå‰æõÁµ¶„Åï„Çå„Åæ„Åô„ÄÇ„Åì„ÅÆÈõªÂúß„Å´„Çà„Å£„Å¶„ÄÅÈõªÂ≠ê„ÅØÈõªÊ∫ê„ÅÆË≤†Ê•µÁ´ØÂ≠ê„Åã„ÇâÂõûË∑Ø„ÇíÈÄö„Çä„ÄÅÊ≠£Ê•µÁ´ØÂ≠ê„Å´Êàª„Çä„Åæ„Åô„ÄÇ

DCÂõûË∑Ø„ÅÆ‰∏ª„Å™ÊßãÊàêË¶ÅÁ¥†„ÅØÊ¨°„ÅÆ„Å®„Åä„Çä„Åß„Åô„ÄÇ

ÈõªÊ∫êÔºöÈõªÂúß„Çí‰æõÁµ¶„Åô„Çã„ÇÇ„ÅÆÔºà‰æãÔºö„Éê„ÉÉ„ÉÜ„É™„ÉºÔºâ„ÄÇ

Â∞é‰ΩìÔºàÈõªÁ∑öÔºâÔºöÈõªÊµÅ„ÅåÊµÅ„Çå„ÇãÁµåË∑Ø„ÄÇ

Ë≤†Ëç∑ÔºöÈõªÊ∞ó„Ç®„Éç„É´„ÇÆ„Éº„Çí‰ΩøÁî®„Åô„ÇãË£ÖÁΩÆ„Åæ„Åü„ÅØÈÉ®ÂìÅÔºà‰æãÔºöÈõªÁêÉ„ÄÅÊäµÊäóÂô®Ôºâ„ÄÇ

„Çπ„Ç§„ÉÉ„ÉÅÔºà„Ç™„Éó„Ç∑„Éß„É≥ÔºâÔºöÂõûË∑Ø„ÇíÈñãÈñâ„Åô„Çã„Åì„Å®„ÅßÈõªÊµÅ„ÅÆÊµÅ„Çå„ÇíÂà∂Âæ°„Åó„Åæ„Åô„ÄÇ

DCÂõûË∑ØËß£Êûê„ÅßÁî®„ÅÑ„Çâ„Çå„ÇãÂü∫Êú¨ÁöÑ„Å™Ê≥ïÂâá„ÅÆ‰∏Ä„Å§„Å´„Ç™„Éº„É†„ÅÆÊ≥ïÂâá„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ

ùëâ
= 
ùêº
√ó
ùëÖ
V=I√óR
„Åì„Åì„Åß„ÄÅ

ùëâ
V„ÅØÈõªÂúßÔºà„Éú„É´„ÉàÔºâ„ÄÅ

ùêº
I„ÅØÈõªÊµÅÔºà„Ç¢„É≥„Éö„Ç¢Ôºâ„ÄÅ

ùëÖ
R„ÅØÊäµÊäóÔºà„Ç™„Éº„É†Ôºâ„Åß„Åô„ÄÇ

DCÂõûË∑Ø„ÅØÁõ¥Âàó„Åæ„Åü„ÅØ‰∏¶Âàó„Å´ÊßãÊàê„Åß„Åç„Åæ„Åô„ÄÇ

Áõ¥ÂàóÂõûË∑Ø„Åß„ÅØ„ÄÅ„Åô„Åπ„Å¶„ÅÆÈÉ®ÂìÅ„ÅåÁ´Ø„Åã„ÇâÁ´Ø„Åæ„ÅßÊé•Á∂ö„Åï„Çå„Å¶„ÅÑ„Çã„Åü„ÇÅ„ÄÅÈõªÊµÅ„ÅåÊµÅ„Çå„ÇãÁµåË∑Ø„ÅØ1„Å§„Åó„Åã„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ„Åô„Åπ„Å¶„ÅÆÈÉ®ÂìÅ„Å´ÊµÅ„Çå„ÇãÈõªÊµÅ„ÅØÂêå„Åò„Åß„Åô„Åå„ÄÅÂêÑÈÉ®ÂìÅ„ÅÆÈõªÂúß„ÅØ„Åù„Çå„Åû„ÇåÈôç‰∏ã„Åó„Åæ„Åô„ÄÇ

‰∏¶ÂàóÂõûË∑Ø„Åß„ÅØ„ÄÅ„Åô„Åπ„Å¶„ÅÆÈÉ®ÂìÅ„ÅåÂêå„Åò2ÁÇπ„Å´Êé•Á∂ö„Åï„Çå„Å¶„ÅÑ„Çã„Åü„ÇÅ„ÄÅÈõªÊµÅ„ÅÆÁµåË∑Ø„ÅØË§áÊï∞„ÅÇ„Çä„Åæ„Åô„ÄÇÂêÑÂàÜÂ≤ê„ÅÆÈõªÂúß„ÅØÂêå„Åò„Åß„Åô„Åå„ÄÅÈõªÊµÅ„ÅØÂêÑÁµåË∑Ø„ÅÆÊäµÊäó„Å´Âøú„Åò„Å¶ÂàÜÂâ≤„Åï„Çå„Åæ„Åô„ÄÇ

„Ç≠„É´„Éí„Éõ„ÉÉ„Éï„ÅÆÊ≥ïÂâá„ÇÇÁõ¥ÊµÅÂõûË∑ØËß£Êûê„Å´„Åä„ÅÑ„Å¶ÈáçË¶Å„Å™ÂΩπÂâ≤„ÇíÊûú„Åü„Åó„Åæ„Åô„ÄÇ

„Ç≠„É´„Éí„Éõ„ÉÉ„Éï„ÅÆÈõªÊµÅÊ≥ïÂâáÔºàKCLÔºâÔºöÊé•ÂêàÈÉ®„Å´ÊµÅÂÖ•„Åô„ÇãÈõªÊµÅ„ÅÆÁ∑èÂíå„ÅØ„ÄÅÊé•ÂêàÈÉ®„Åã„ÇâÊµÅÂá∫„Åô„ÇãÈõªÊµÅ„ÅÆÁ∑èÂíå„Å´Á≠â„Åó„Åè„Å™„Çä„Åæ„Åô„ÄÇ

„Ç≠„É´„Éí„Éõ„ÉÉ„Éï„ÅÆÈõªÂúßÊ≥ïÂâáÔºàKVLÔºâÔºöÈñâ„É´„Éº„Éó„ÅÆÂë®„Çä„ÅÆ„Åô„Åπ„Å¶„ÅÆÈõªÂúß„ÅÆÁ∑èÂíå„ÅØ„Çº„É≠„Å´„Å™„Çä„Åæ„Åô„ÄÇ

Áõ¥ÊµÅÂõûË∑Ø„ÅØ„ÄÅ„Åª„Å®„Çì„Å©„ÅÆÈõªÂ≠êÊ©üÂô®„ÅÆÂãï‰Ωú„ÇíÁêÜËß£„Åô„Çã‰∏ä„Åß‰∏çÂèØÊ¨†„Åß„Åô„ÄÇÁõ¥ÊµÅÂõûË∑Ø„ÅÆËß£ÊûêÊñπÊ≥ï„ÇíÂ≠¶„Å∂„Åì„Å®„Åß„ÄÅÈõªÊ∞óÂ∑•Â≠¶„Å®ÈõªÂ≠êÂ∑•Â≠¶„ÅÆ„Çà„ÇäÊ∑±„ÅÑÊ¶ÇÂøµ„ÅÆÂü∫Á§é„ÇíÁØâ„Åè„Åì„Å®„Åå„Åß„Åç„Åæ„Åô„ÄÇ`;
  
  console.log(`Input length: ${userInput.length} characters`);
  console.log(`Input preview: ${userInput.substring(0, 100)}...`);
  
  // Planning section
  console.log("\nüß† PLANNING PHASE");
  console.log("-----------------------------------------------");
  console.log("‚è≥ Generating pipeline plan via Master Agent...");
  const masterAgent = new MasterAgent(apiKey);
  const pipelinePlan = await masterAgent.generatePipelinePlan(userInput);
  console.log("‚úÖ Pipeline plan generated");
  
  console.log("\n‚è≥ Creating detailed execution plan via Planner Agent...");
  const plannerAgent = new PlannerAgent(apiKey);
  const detailedPlan = await plannerAgent.planDetailedExecution(userInput);
  console.log("‚úÖ Detailed execution plan created");
  
  // Display planning details
  console.log("\nüìä PLANNING DETAILS");
  console.log("-----------------------------------------------");
  console.log("üìå Pipeline Plan:");
  console.log(JSON.stringify(pipelinePlan, null, 2));
  
  console.log("\nüìå Detailed Execution Plan:");
  console.log(detailedPlan);
  
  // Execution section
  console.log("\n‚öôÔ∏è EXECUTION PHASE");
  console.log("-----------------------------------------------");
  console.log("‚è≥ Orchestrating pipeline execution...");
  const startTime = Date.now();
  const { result, rationale } = await orchestrateUserInput(userInput, apiKey);
  const executionTime = ((Date.now() - startTime) / 1000).toFixed(2);
  console.log(`‚úÖ Pipeline execution completed in ${executionTime} seconds`);
  
  // Results section
  console.log("\nüìã RESULTS");
  console.log("-----------------------------------------------");
  console.log("üìå Pipeline Execution Rationale:");
  console.log(rationale);
  
  console.log("\nüìå Final Output:");
  console.log(result);
  
  console.log("\n===============================================");
  console.log("‚úÖ PADHAI-BUDDY EXAMPLE EXECUTION COMPLETED");
  console.log("===============================================");
}

// Ensure this file runs only if executed directly (not imported as a module)
if (require.main === module) {
  console.log("üîç Running Padhai-Buddy example...");
  runExample()
    .catch(error => {
      console.error("‚ùå Error during execution:", error);
      process.exit(1);
    });
}
